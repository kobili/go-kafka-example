version: "3"

services:
  postgres:
    image: postgres:14
    ports:
      - 3432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=go_test
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - ./pgData:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d go_test"]
      interval: 5s
      timeout: 5s
      retries: 0
    networks:
      - go-server

  kafka:
    image: apache/kafka:3.8.0
    ports:
      - 9092:9092
      - 9093:9093
    volumes:
      - ./kafkaLogs:/tmp/kafka-logs
    environment:
      # TODO: Read up - https://hub.docker.com/r/apache/kafka
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    networks:
      - go-server

  go-app:
    depends_on:
      postgres:
        condition: service_healthy
    build:
      context: ./server
      dockerfile: ../docker/go/Dockerfile
    ports:
      - 4321:4321
      - 2345:2345
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=go_test
      - SERVER_PORT=4321
    volumes:
      - ./server:/app
    networks:
      - go-server

  migrate:
    image: migrate/migrate:v4.17.1
    volumes:
      - ./migrations/sql:/migrations
    networks:
      - go-server

networks:
  go-server:
    driver: bridge
